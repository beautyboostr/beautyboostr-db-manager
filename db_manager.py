import streamlit as st
import json
import os

# --- Page Configuration ---
st.set_page_config(
    page_title="BeautyBoostr DB Manager",
    layout="wide"
)

# --- Constants ---
DB_FILE_PATH = 'data/ingredients.json'

# --- Data Loading ---
def load_ingredients_data(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8-sig') as f:
            return json.load(f)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        return None

# --- Main App ---
st.title("üåø BeautyBoostr: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤")
st.markdown("---")

# Initialize session state for dynamic functions list
if 'functions' not in st.session_state:
    st.session_state.functions = [{
        "IF_Percent": "", "IF_pH": "", "Target": "", "Function": ""
    }]

# Create tabs for different actions
tab1, tab2 = st.tabs(["üìú –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ –ü–æ—à—É–∫", "‚ûï –î–æ–¥–∞—Ç–∏ –ù–æ–≤–∏–π –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç"])


# --- TAB 1: View & Search Ingredients ---
with tab1:
    ingredients_data = load_ingredients_data(DB_FILE_PATH)
    if ingredients_data:
        st.header("–ü–µ—Ä–µ–≥–ª—è–¥ —ñ—Å–Ω—É—é—á–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤")
        search_term = st.text_input("–ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é INCI:", placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥, Aqua")

        filtered_ingredients = [
            ing for ing in ingredients_data
            if search_term.lower() in ing.get("INCI", "").lower()
        ]

        if not filtered_ingredients:
            st.warning("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∞—à–æ–º—É –ø–æ—à—É–∫—É, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        else:
            st.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered_ingredients)} –∑ {len(ingredients_data)} —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤.")
            for ingredient in filtered_ingredients:
                with st.expander(f"**{ingredient.get('INCI', 'N/A')}** ({ingredient.get('Name_UA', 'N/A')})"):
                    st.write(f"**–ü–æ—Ö–æ–¥–∂–µ–Ω–Ω—è:** {ingredient.get('Origin', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}")
                    st.write(f"**–ü—Ä–∏—Ä–æ–¥–∞:** {ingredient.get('Nature', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}")
                    st.write(f"**–û–±–º–µ–∂–µ–Ω–Ω—è:** {ingredient.get('Restrictions', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}")
                    
                    st.subheader("–§—É–Ω–∫—Ü—ñ—ó:")
                    for func in ingredient.get("Functions", []):
                        condition = f"–Ø–∫—â–æ % = [{func.get('IF_Percent', 'N/A')}] —Ç–∞ pH = [{func.get('IF_pH', 'N/A')}]"
                        st.markdown(f"- **{func.get('Function', 'N/A')}** –¥–ª—è **{func.get('Target', 'N/A')}** `({condition})`")


# --- TAB 2: Add New Ingredient Form ---
with tab2:
    st.header("–§–æ—Ä–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞")
    st.markdown("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø–æ–ª—è –Ω–∏–∂—á–µ. –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ JSON', —Å–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–¥ —ñ –≤—Å—Ç–∞–≤—Ç–µ –π–æ–≥–æ —É –≤–∞—à —Ñ–∞–π–ª `data/ingredients.json` –Ω–∞ GitHub.")

    with st.form("new_ingredient_form"):
        # Main ingredient details
        col1, col2 = st.columns(2)
        with col1:
            inci_name = st.text_input("**INCI –ù–∞–∑–≤–∞**", key="inci")
            origin = st.selectbox("**–ü–æ—Ö–æ–¥–∂–µ–Ω–Ω—è**", ["–ù–∞—Ç—É—Ä–∞–ª—å–Ω–µ", "–°–∏–Ω—Ç–µ—Ç–∏—á–Ω–µ"], key="origin")
            physical_form = st.text_input("**–§—ñ–∑–∏—á–Ω–∞ —Ñ–æ—Ä–º–∞**", key="physical_form")
            restrictions = st.text_area("**–û–±–º–µ–∂–µ–Ω–Ω—è**", key="restrictions")
        with col2:
            name_ua = st.text_input("**–ù–∞–∑–≤–∞ (UA)**", key="name_ua")
            nature = st.selectbox("**–ü—Ä–∏—Ä–æ–¥–∞**", ["–û—Ä–≥–∞–Ω—ñ—á–Ω–∞", "–ù–µ–æ—Ä–≥–∞–Ω—ñ—á–Ω–∞"], key="nature")
            ecology = st.selectbox("**–ï–∫–æ–ª–æ–≥—ñ—á–Ω—ñ—Å—Ç—å**", ["–ï–∫–æ–ª–æ–≥—ñ—á–Ω–∏–π", "–ù–µ –µ–∫–æ–ª–æ–≥—ñ—á–Ω–∏–π"], key="ecology")
        
        st.subheader("–í—ñ–¥—Å–æ—Ç–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è (%)")
        p_col1, p_col2, p_col3 = st.columns(3)
        with p_col1:
            usage_gel = st.text_input("–ì–µ–ª—å –¥–ª—è –≤–º–∏–≤–∞–Ω–Ω—è", key="usage_gel")
        with p_col2:
            usage_cream = st.text_input("–ö—Ä–µ–º", key="usage_cream")
        with p_col3:
            usage_tonic = st.text_input("–¢–æ–Ω—ñ–∫", key="usage_tonic")

        st.subheader("–§—É–Ω–∫—Ü—ñ—ó —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞")
        
        # Dynamic function forms
        for i, func in enumerate(st.session_state.functions):
            st.markdown(f"--- \n #### –§—É–Ω–∫—Ü—ñ—è #{i+1}")
            f_col1, f_col2, f_col3, f_col4 = st.columns(4)
            with f_col1:
                func['IF_Percent'] = st.text_input("–Ø–∫—â–æ %", key=f"if_percent_{i}")
            with f_col2:
                func['IF_pH'] = st.text_input("–Ø–∫—â–æ pH", key=f"if_ph_{i}")
            with f_col3:
                func['Target'] = st.text_input("–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (THEN)", key=f"target_{i}")
            with f_col4:
                func['Function'] = st.text_input("–§—É–Ω–∫—Ü—ñ—è", key=f"function_{i}")
        
        # Buttons to add/remove function blocks
        b_col1, b_col2, _ = st.columns([1, 1, 5])
        if b_col1.button("–î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é"):
            st.session_state.functions.append({"IF_Percent": "", "IF_pH": "", "Target": "", "Function": ""})
            st.experimental_rerun()
        if b_col2.button("–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é —Ñ—É–Ω–∫—Ü—ñ—é") and len(st.session_state.functions) > 1:
            st.session_state.functions.pop()
            st.experimental_rerun()

        submitted = st.form_submit_button("‚úÖ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ JSON")

        if submitted:
            # Gather all data into a dictionary
            new_ingredient = {
                "INCI": inci_name,
                "Name_UA": name_ua,
                "Origin": origin,
                "Nature": nature,
                "Physical_Form": physical_form,
                "Ecology": ecology,
                "Restrictions": restrictions,
                "Usage_Percentages": {
                    "Cleansing_Gel": usage_gel or None,
                    "Cream": usage_cream or None,
                    "Tonic": usage_tonic or None
                },
                "Functions": st.session_state.functions
            }
            
            # Convert to JSON string
            # ensure_ascii=False is important for Cyrillic characters
            json_output = json.dumps(new_ingredient, indent=2, ensure_ascii=False)
            
            st.subheader("üéâ –ì–æ—Ç–æ–≤–æ! –í–∞—à JSON-–∫–æ–¥:")
            st.code(json_output, language='json')
            st.warning("–¢–µ–ø–µ—Ä —Å–∫–æ–ø—ñ—é–π—Ç–µ —Ü–µ–π –∫–æ–¥ —ñ –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –¥–æ —Å–ø–∏—Å–∫—É —É —Ñ–∞–π–ª—ñ `data/ingredients.json` –Ω–∞ GitHub.")

